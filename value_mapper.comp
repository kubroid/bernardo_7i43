/******************************************************************************
 *
 * Copyright (C) 2013 Alex Kubrinsky
 *
 *
 * This module implements a value mapper to correct spindle RPM, controlled by PWM.
 *
 ******************************************************************************
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of version 2 of the GNU General
 * Public License as published by the Free Software Foundation.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111 USA
 *
 * THE AUTHORS OF THIS LIBRARY ACCEPT ABSOLUTELY NO LIABILITY FOR
 * ANY HARM OR LOSS RESULTING FROM ITS USE.  IT IS _EXTREMELY_ UNWISE
 * TO RELY ON SOFTWARE ALONE FOR SAFETY.  Any machinery capable of
 * harming persons must have provisions for completely removing power
 * from all motors, etc, before persons enter any danger area.  All
 * machinery must be designed to comply with local and national safety
 * codes, and the authors of this software can not, and do not, take
 * any responsibility for such compliance.
 *
 * This code was written as part of the EMC HAL project.  For more
 * information, go to www.linuxcnc.org.
 *
 ******************************************************************************/

component dia_mapper "Diapason Mapper";

description """Diapason Mapper. Implements the following mapping function:

out(x) = ((x-x1)*(y2-y1)/(x2-x1)+y1)
Where x1 < x < x2

So, it maps one diapason of values to another.
""";

pin in int in "Input value";
pin out int out "Mapped value";
pin in bit enable = 1 "Mapper enable. When false, the in is passed to out \
without any calculations.";

option extra_setup;

function _;

license "GPL";
;;

#include <stdio.h>
#include <stdlib.h>

struct in_data{
	int commanded;
	int measured;
};

struct in_data raw_data[] = {
	/*commanded, measured*/
	{       100,      180 },
	{       150,      190 }
	{       200,      350 },
	{       300,      400 },
	{       400,      450 },
	{       500,      510 },
	{       600,      580 },
	{       700,      650 },
	{       800,      700 },
};

#define ARR_SIZE(a) (sizeof(a)/sizeof((a)[0]))

int comparer(const void *_v1, const void *_v2)
{
	in_data *v1 = (in_data*)_v1;
	in_data *v2 = (in_data*)_v2;
	if(v1->out == v2->out)
		return 0;
	else if(v1->out > v2->out)
		return 1;
	return -1;
}

EXTRA_SETUP()
{
    qsort(raw_data, (sizeof(raw_data)/sizeof(raw_data[0])), sizeof(in_data), comparer);

    return(0);
}


int calc(int x)
{
	if(raw_data[0].measured > x) // X too low
		return raw_data[0].commanded;
	
	int i, j;

	for(i = 0; i < ARR_SIZE(raw_data); ++i)
	{
		j = i + 1;
		if(j == ARR_SIZE(raw_data))	// x tool high
			return raw_data[i].commanded;

		if(raw_data[j].measured >= x)
			break;
	}

	int x1, x2, y1, y2;
	y1 = raw_data[i].commanded;
	y2 = raw_data[j].commanded;
	x1 = raw_data[i].measured;
	x2 = raw_data[j].measured;

	if(x2 == x1)	// prevent divide by zero
	{
		return y1;
	}

	return ((int)(x-x1)*(y2-y1)/(x2-x1)+y1);
}

FUNCTION(_)
{
	int x = in;
	if(enable)
	{
		out = x;
		return;
	}
	out = calc(x)
}
